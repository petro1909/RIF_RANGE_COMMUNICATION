PROGRAM RIF_RANGE_SEND_DATA
CONST 
    cc_home = 137
    cc_clear_win = 128
    
    RIF_RANGE = 25
    NORM_RIFTEK = 16384
VAR

    data_type : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER

    comm_file : FILE

    COMMAND_TYPE : INTEGER
    PARAMETER_SIZE_IN_BYTES : INTEGER
    
    PARAMETER_FIRST_BYTE_CODE : INTEGER
    PARAMETER_CODE_BYTE_ARRAY : ARRAY[24] OF BYTE
    PARAMETER_VALUE : REAL
    PARAMETER_VALUE_BYTE_ARRAY : ARRAY[24] OF BYTE
    
    
    PARAMETERS_FIRST_REGISTER : INTEGER
    
    REQUEST_SIZE : INTEGER
    REQUEST_ARRAY : ARRAY[24] OF BYTE

    RESPONSE_SIZE : INTEGER
    RESPONSE_ARRAY : ARRAY[24] OF BYTE 


    STOP_DO : INTEGER

	--TYPE
	--RANGE_INFO = STRUCTURE
	DEVICE_TYPE : REAL
	PO_VERSION : REAL
    SERIAL_NUMBER : REAL
    BASE_DISTANCE : REAL
    RANGE : REAL
    --ENDSTRUCTURE

    DISTANCE : REAL


    ----POST ERRORS----
    ROUTINE POSTERR(cause : STRING) 
    & FROM CUST_ERRORS
    ROUTINE POST_CUST_ERR(cause : STRING) 
    & FROM CUST_ERRORS
    ----POST ERRORS----

    ----READ INTEGER PARAMETER----
    ROUTINE GET_TPE_INT_PARAMETER(number : INTEGER) : INTEGER 
    & FROM CUST_READ_PARAMS
    ----READ INTEGER PARAMETER----   
    
    ----PARAMS CONVERTS----
    ROUTINE CNV_DECIMAL_PARAM_TO_BYTE_ARRAY(param : INTEGER) : ARRAY OF BYTE 
    & FROM CUST_READ_PARAMS

    ROUTINE CNV_ARR_PARAM_TO_RIF_PARAM_ARR(param_arr : ARRAY OF BYTE) : ARRAY OF BYTE
    & FROM CUST_READ_PARAMS
    
    ROUTINE READ_PARAMETER_FROM_BYTE_ARRAY(response : ARRAY OF BYTE; start_byte_number : INTEGER; bytes_count : INTEGER) : INTEGER
    & FROM CUST_READ_PARAMS

    ROUTINE CNV_DECIMAL_PARAM_TO_RIF_PARAM_ARR(param : INTEGER) : ARRAY OF BYTE
    & FROM CUST_READ_PARAMS
    ----PARAMS CONVERTS----


    --------------------
    ROUTINE WRITE_COMMAND_TO_REQUEST_ARRAY(c_type : INTEGER)
    BEGIN
        REQUEST_ARRAY[1] = 1
        REQUEST_ARRAY[2] = 128 + c_type
    END WRITE_COMMAND_TO_REQUEST_ARRAY
    --------------------
    
    --------------------
    ROUTINE SEND_REQUEST(req_bytes : ARRAY OF BYTE;  req_size : INTEGER; c_file : FILE)
    VAR
        index : INTEGER
    BEGIN
        FOR INDEX = 1 TO req_size DO
            WRITE c_file(req_bytes[INDEX]::1)
        ENDFOR
        
        STATUS = IO_STATUS(comm_file) 
        WRITE('FILE STATUS  =  ',STATUS,CR)
    
    END SEND_REQUEST
    --------------------

    --------------------
    ROUTINE READ_RESPONSE(res_bytes : ARRAY OF BYTE; res_start_index : INTEGER; res_size : INTEGER; c_file : FILE)
    VAR
        index : INTEGER
    BEGIN
        WRITE('RESPONSE_SIZE', res_size,CR)
        FOR INDEX = res_start_index TO res_start_index + res_size - 1 DO
            READ c_file(res_bytes[INDEX]::1)
        ENDFOR

        STATUS = IO_STATUS(comm_file) 
        WRITE('FILE STATUS  =  ', STATUS, CR)
    
    END READ_RESPONSE
    --------------------

    --------------------
    ROUTINE READ_PARAM_VALUE()
    VAR
        IN_INDEX = 1 
        PARAM_ARRAY : ARRAY[2] OF BYTE
    BEGIN
        --READ PARAMETER SIZE (BYTES)
        PARAMETER_SIZE_IN_BYTES = GET_TPE_INT_PARAMETER(2)

        --READ PARAMETER FIRST BYTE CODE INT OR STRING
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(3)

        --READ REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(4)

        REQUEST_SIZE = 4
        RESPONSE_SIZE = 2
        
        FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO

            WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
            PARAM_ARRAY = CNV_DECIMAL_PARAM_TO_RIF_PARAM_ARR(PARAMETER_FIRST_BYTE_CODE)
            REQUEST_ARRAY[3] = PARAM_ARRAY[1]
            REQUEST_ARRAY[4] = PARAM_ARRAY[2]

            SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
            READ_RESPONSE(RESPONSE_ARRAY, IN_INDEX, RESPONSE_SIZE, comm_file)
            
            PARAMETER_FIRST_BYTE_CODE = PARAMETER_FIRST_BYTE_CODE + 1
            IN_INDEX = IN_INDEX + RESPONSE_SIZE
        ENDFOR

        CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
        PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, RESPONSE_SIZE)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
    END READ_PARAM_VALUE
    --------------------

    --------------------
    ROUTINE WRITE_PARAMETER_VALUE()
    VAR
        param_code : ARRAY[2] OF BYTE
        param_value : ARRAY[2] OF BYTE
    BEGIN
        --READ PARAMETER SIZE (BYTES)
        PARAMETER_SIZE_IN_BYTES = GET_TPE_INT_PARAMETER(2)

        --READ PARAMETER FIRST BYTE CODE INT OR STRING
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(3)

        --READ PARAMETER VALUE
        PARAMETER_VALUE = GET_TPE_INT_PARAMETER(4)

        REQUEST_SIZE = 6
        

        FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO

            WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
            
            param_code = CNV_DECIMAL_PARAM_TO_RIF_PARAM_ARR(PARAMETER_FIRST_BYTE_CODE)
            REQUEST_ARRAY[3] = param_code[1]
            REQUEST_ARRAY[4] = param_code[2]
            
            param_value = CNV_DECIMAL_PARAM_TO_RIF_PARAM_ARR(PARAMETER_FIRST_BYTE_CODE)
            REQUEST_ARRAY[5] = param_value[1]
            REQUEST_ARRAY[6] = param_value[2]
            SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
            
            PARAMETER_FIRST_BYTE_CODE = PARAMETER_FIRST_BYTE_CODE + 1
            IN_INDEX = IN_INDEX + RESPONSE_SIZE
        ENDFOR

        CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)


        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)
        WRITE_PARAMETER_CODE_TO_REQ_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)
        WRITE_PARAMETER_VALUE_TO_REQ_ARRAY(PARAMETER_VALUE, PARAMETER_SIZE_IN_BYTES, 3 + PARAMETER_SIZE_IN_BYTES * 2)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    END WRITE_PARAMETER_VALUE
    --------------------



BEGIN

    COMMAND_TYPE = GET_TPE_INT_PARAMETER(1)

    IF((COMMAND_TYPE < 1) OR (COMMAND_TYPE > 8)) THEN 
        POST_CUST_ERR('PARAMETER SHOULD BE FROM 1 TO 8') 
    ENDIF
    
    WRITE (CHR(cc_home), CHR(cc_clear_win)) -- Clear TP USER menu
	
    SET_FILE_ATR(comm_file, ATR_UF)
    SET_FILE_ATR(comm_file, ATR_IA)

    STATUS = SET_PORT_ATR(PORT_3, ATR_BAUD, BAUD_9600)
    POSTERR('Error setting ATR_BAUD!')
    STATUS = SET_PORT_ATR(PORT_3, ATR_DBITS, DBITS_8)
    POSTERR('Error setting ATR_DBITS!')
    STATUS = SET_PORT_ATR(PORT_3, ATR_PARITY, PARITY_EVEN)
    POSTERR('Error setting ATR_PARITY!')
    STATUS = SET_PORT_ATR(PORT_3, ATR_READAHD, 1)
    POSTERR('Error setting ATR_READAHD!')
    STATUS = SET_PORT_ATR(PORT_3, ATR_SBITS, SBITS_1)
    POSTERR('Error setting ATR_SBITS!')


    CLR_IO_STAT(comm_file)
    STATUS = 0
  
    OPEN FILE comm_file('RW', 'P3:')
    STATUS = IO_STATUS(comm_file)
    WRITE('OPEN FILE STATUS  =  ',STATUS,CR)
  
  ----------------------------------------------------------------
  -- SEND COMMAND --
  ----------------------------------------------------------------
  
  CLR_IO_STAT(comm_file)
  STATUS = 0

    ----DEVICE IDENTIFICATION----
    IF(COMMAND_TYPE = 1) THEN
        -- GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)

        REQUEST_SIZE = 2
        RESPONSE_SIZE = 16

        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, 1, RESPONSE_SIZE, comm_file)
        
        --DEVICE TYPE--
        DEVICE_TYPE =  READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, 2)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DEVICE_TYPE, STATUS)
        
        --PO VERSION--
        PO_VERSION = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 3, 2)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 1, PO_VERSION, STATUS)
        
        --SERIAL NUMBER--
        SERIAL_NUMBER = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 5, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 2, SERIAL_NUMBER, STATUS)
        
        --BASE DISTANCE--
        BASE_DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 9, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 3, BASE_DISTANCE, STATUS)
        
        --RANGE--
        RANGE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 13, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 4, RANGE, STATUS)
    ENDIF
    ----DEVICE IDENTIFICATION----
    

    --READ PARAMETER VALUE--
    IF(COMMAND_TYPE = 2) THEN
        READ_PARAM_VALUE
    ENDIF
    --READ PARAMETER VALUE--


    --WRITE PARAMETER VALUE--
    IF(COMMAND_TYPE = 3) THEN
        WRITE_PARAM_VALUE()
    ENDIF
    --WRITE PARAMETER VALUE--

    --FLASH MEMORY--
    IF(COMMAND_TYPE = 4) THEN
        REQUEST_SIZE = 4
        RESPONSE_SIZE = 2
        
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(2)
        IF(PARAMETER_FIRST_BYTE_CODE <> 170 OR PARAMETER_FIRST_BYTE_CODE <> 105) THEN
            POST_CUST_ERR('')
        ENDIF
        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
            
        param_code = CNV_DECIMAL_PARAM_TO_RIF_PARAM_ARR(PARAMETER_FIRST_BYTE_CODE)
        REQUEST_ARRAY[3] = param_code[1]
        REQUEST_ARRAY[4] = param_code[2]
        
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, 1, RESPONSE_SIZE, comm_file)
        

    ENDIF
    --FLASH MEMORY--

    --RESULT SNAPPING--
    IF(COMMAND_TYPE = 5) THEN
        REQUEST_SIZE = 2
        
        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    ENDIF
    --RESULT SNAPPING--

    --GET RANGE VALUE OR START RANGE THREAD--
    IF(COMMAND_TYPE = 6) THEN
        --GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)

        REQUEST_SIZE = 2
        RESPONSE_SIZE = 4

        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, 1, RESPONSE_SIZE, comm_file)

        DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, RESPONSE_SIZE)
        DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
        
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)
    ENDIF
    --GET RANGE VALUE--


    IF(COMMAND_TYPE = 7) THEN
        --GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)
        
        --GET STOP DO
        STOP_DO = GET_TPE_INT_PARAMETER(3)
        
        REQUEST_SIZE = 2
        RESPONSE_SIZE = 4

        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)

        WHILE DOUT[STOP_DO] = OFF DO
            READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)

            DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, RESPONSE_SIZE)
            DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
            
            SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)

        ENDWHILE
        REQUEST_SIZE = 2
        COMMAND_TYPE = 8
        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    ENDIF
    --GET RANGE VALUE--


    --STOP RANGE THREAD--
    IF(COMMAND_TYPE = 8) THEN
        REQUEST_SIZE = 2
        WRITE_COMMAND_TO_REQUEST_ARRAY(COMMAND_TYPE)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    ENDIF
    --STOP RANGE THREAD--


    ----------------------------------------------------------------
    -- CLOSE FILE --
    ----------------------------------------------------------------
    
    CLR_IO_STAT(comm_file) 
    STATUS = 0
    
    CLOSE FILE comm_file
    STATUS = IO_STATUS(comm_file)	


END RIF_RANGE_SEND_DATA