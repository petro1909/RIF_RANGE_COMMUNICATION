PROGRAM RIF_RANGE_SEND_DATA
CONST 
    cc_home = 137
    cc_clear_win = 128
    
    RIF_RANGE = 25
    NORM_RIFTEK = 16384

    RIFTEK_DEFAULT_COMMAND = 128
VAR
    data_type   : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER

	INDEX : INTEGER
    comm_file : FILE

    ----INPUT PARAMETERS----
    COMMAND_TYPE : INTEGER
    
    PARAMETER_SIZE_IN_BYTES : INTEGER
    PARAMETER_FIRST_BYTE_CODE : INTEGER
    PARAMETER_VALUE : INTEGER
    PARAMETERS_FIRST_REGISTER : INTEGER
    ----INPUT PARAMETERS----
    
    

    REQUEST_SIZE : INTEGER
    REQUEST_PARAMETER_ARR_TAKE_INDEX : INTEGER
    REQUEST_PARAMETER_ARR_TAKE_LENGTH : INTEGER
    REQUSET_PARAMETER_CODE_ARRAY : ARRAY[10] OF BYTE
    REQUSET_PARAMETER_VALUE_ARRAY : ARRAY[10] OF BYTE
    REQUEST_ARRAY : ARRAY[10] OF BYTE
    REQUEST_ARRAY_PUSH_INDEX : INTEGER
    
    RESPONSE_SIZE : INTEGER
    RESPONSE_ARRAY : ARRAY[10] OF BYTE 
    RESPONSE_PARAMETER_VALUE_ARRAY : ARRAY[10] OF BYTE
    RESPONSE_PARAMETER_ARR_PUSH_INDEX : INTEGER
    

    --DEVICE INFO--
	--TYPE
	--RANGE_INFO = STRUCTURE
	DEVICE_TYPE : REAL
	PO_VERSION : REAL
    SERIAL_NUMBER : REAL
    BASE_DISTANCE : REAL
    RANGE : REAL
    --ENDSTRUCTURE
    --DEVICE INFO--
    
    DISTANCE : REAL


    ----POST ERRORS----
    ROUTINE POSTERR(cause : STRING) & 
    FROM CUST_ERRORS
    ROUTINE POST_CUST_ERR(cause : STRING) & 
    FROM CUST_ERRORS
    ----POST ERRORS----

    ----READ INTEGER PARAMETER----
    ROUTINE GET_TPE_INT_PARAMETER(number : INTEGER) : INTEGER & 
    FROM CUST_READ_PARAMS
    ----READ INTEGER PARAMETER----   
    
    ----PARAMS CONVERTS----
    ROUTINE CNV_DECIMAL_PARAM_TO_BYTE_ARRAY(param : INTEGER; param_size : INTEGER) : ARRAY OF BYTE & 
    FROM CUST_READ_PARAMS

    ROUTINE CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(param_code : INTEGER; param_size : INTEGER) : ARRAY OF BYTE & 
    FROM CUST_READ_PARAMS
    
    ROUTINE READ_PARAMETER_FROM_BYTE_ARRAY(response : ARRAY OF BYTE; start_byte_number : INTEGER; bytes_count : INTEGER) : INTEGER & 
    FROM CUST_READ_PARAMS

    ----PARAMS CONVERTS----
    
    ROUTINE CLEAR_ARR_TO_END(arr : ARRAY OF BYTE; START_INDEX : INTEGER) &
    FROM CUST_ARR_UTIL
    
    ROUTINE PUSH_TO_ARRAY(dest_arr : ARRAY OF BYTE; dest_arr_insert_index : INTEGER; source_arr : ARRAY OF BYTE; source_arr_take_index : INTEGER; source_arr_take_length : INTEGER) & 
    FROM CUST_ARR_UTIL
    
    
    --WRITE COMMAND CODE AND NETWORK ADDRESS TO REQUEST ARRAY--
    --------------------
    ROUTINE WRITE_COMMAND_TO_REQUEST_ARRAY(arr : ARRAY OF BYTE; c_type : INTEGER)
    BEGIN
        arr[1] = 1
        arr[2] = RIFTEK_DEFAULT_COMMAND + c_type
    END WRITE_COMMAND_TO_REQUEST_ARRAY
    --------------------
    

    --------------------
    ROUTINE SEND_REQUEST(req_bytes : ARRAY OF BYTE;  req_size : INTEGER; c_file : FILE)
    VAR
        index : INTEGER
    BEGIN
        FOR INDEX = 1 TO req_size DO
            WRITE c_file(req_bytes[INDEX]::1)
        ENDFOR
        
        STATUS = IO_STATUS(comm_file) 
        WRITE('FILE STATUS  =  ',STATUS,CR)
    
    END SEND_REQUEST
    --------------------

    --------------------
    ROUTINE READ_RESPONSE(res_bytes : ARRAY OF BYTE; res_size : INTEGER; c_file : FILE)
    VAR
        index : INTEGER
    BEGIN
        FOR INDEX = 1 TO res_size DO
            READ c_file(res_bytes[INDEX]::1)
        ENDFOR

        STATUS = IO_STATUS(comm_file) 
        WRITE('FILE STATUS  =  ', STATUS, CR)
    
    END READ_RESPONSE
    --------------------


    ----DEVICE IDENTIFICATION ROUTINE----
    ROUTINE DEVICE_IDENTIFICATION
    BEGIN
        -- GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)

        REQUEST_SIZE = 2
        RESPONSE_SIZE = 16

        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)
        
        --DEVICE TYPE--
        DEVICE_TYPE =  READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, 2)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DEVICE_TYPE, STATUS)
        
        --PO VERSION--
        PO_VERSION = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 3, 2)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 1, PO_VERSION, STATUS)
        
        --SERIAL NUMBER--
        SERIAL_NUMBER = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 5, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 2, SERIAL_NUMBER, STATUS)
        
        --BASE DISTANCE--
        BASE_DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 9, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 3, BASE_DISTANCE, STATUS)
        
        --RANGE--
        RANGE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 13, 4)
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 4, RANGE, STATUS)
    END DEVICE_IDENTIFICATION
    ----DEVICE IDENTIFICATION ROUTINE----



    ----READ PARAMETER ROUTINE----
    ROUTINE READ_PARAM_VALUE
    BEGIN
        --READ PARAMETER SIZE (BYTES)
        PARAMETER_SIZE_IN_BYTES = GET_TPE_INT_PARAMETER(2)

        --READ PARAMETER FIRST BYTE CODE INT OR STRING
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(3)

        --READ REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(4)

        COMMAND_TYPE = 2
        REQUEST_SIZE = 4
        RESPONSE_SIZE = 2

        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
        REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)

        REQUEST_ARRAY_PUSH_INDEX = 3
        REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
        REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
        RESPONSE_PARAMETER_ARR_PUSH_INDEX = 1

        FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO
            PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
            
            SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
            READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)
            
            PUSH_TO_ARRAY(RESPONSE_PARAMETER_VALUE_ARRAY, RESPONSE_PARAMETER_ARR_PUSH_INDEX, RESPONSE_ARRAY, 1, RESPONSE_SIZE)

            REQUEST_PARAMETER_ARR_TAKE_INDEX = REQUEST_PARAMETER_ARR_TAKE_INDEX + 2
            RESPONSE_PARAMETER_ARR_PUSH_INDEX = RESPONSE_PARAMETER_ARR_PUSH_INDEX + 2
        ENDFOR

        PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_PARAMETER_VALUE_ARRAY, 1, PARAMETER_SIZE_IN_BYTES)

        SET_INT_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
                
        CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
        CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
        CLEAR_ARR_TO_END(RESPONSE_ARRAY, 1)
        CLEAR_ARR_TO_END(RESPONSE_PARAMETER_VALUE_ARRAY, 1)
    END READ_PARAM_VALUE
    ----READ PARAMETER ROUTINE----

    --------------------
    ROUTINE WRITE_PARAMETER_VALUE
    BEGIN
        --READ PARAMETER SIZE (BYTES)
        PARAMETER_SIZE_IN_BYTES = GET_TPE_INT_PARAMETER(2)

        --READ PARAMETER FIRST BYTE CODE INT OR STRING
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(3)

        --READ PARAMETER VALUE
        PARAMETER_VALUE = GET_TPE_INT_PARAMETER(4)
        COMMAND_TYPE = 3
        REQUEST_SIZE = 6
        
        --WRITE REQUEST CODE TO REQUEST ARRAY
        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
        --WTITE PARAMETER CODE TO PARAMETER ARRAY
        REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)
        --WTITE PARAMETER VALUE TO PARAMETER ARRAY
        REQUSET_PARAMETER_VALUE_ARRAY = CNV_DECIMAL_PARAM_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)
        

        REQUEST_ARRAY_PUSH_INDEX = 3
        REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
        REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
        
        FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO
            PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
            PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX + 2, REQUSET_PARAMETER_VALUE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
            
            SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
            
            REQUEST_ARRAY_PUSH_INDEX = REQUEST_ARRAY_PUSH_INDEX + 2
        ENDFOR

        CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
        CLEAR_ARR_TO_END(REQUSET_PARAMETER_VALUE_ARRAY, 1)
        CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
    END WRITE_PARAMETER_VALUE
    --------------------

    

    --FLASH MEMORY--
    ROUTINE FLASH_MEMORY
    BEGIN
        PARAMETER_FIRST_BYTE_CODE = GET_TPE_INT_PARAMETER(2)
        IF (PARAMETER_FIRST_BYTE_CODE <> 170) OR (PARAMETER_FIRST_BYTE_CODE <> 105) THEN
            POST_CUST_ERR('')
        ENDIF
        
        COMMAND_TYPE = 4
        REQUEST_SIZE = 4
        RESPONSE_SIZE = 2
        
        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
        REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, 1)
        
        REQUEST_ARRAY_PUSH_INDEX = 3
        REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
        REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
        RESPONSE_PARAMETER_ARR_PUSH_INDEX = 1
        
        PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)
        
        PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, PARAMETER_SIZE_IN_BYTES)
        SET_INT_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
                
        CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
        CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
        CLEAR_ARR_TO_END(RESPONSE_ARRAY, 1)
    END FLASH_MEMORY
    --FLASH MEMORY--




    --RESULT SNAPPING--
    ROUTINE RESULT_SNAPPING
    BEGIN
        COMMAND_TYPE = 5
        REQUEST_SIZE = 2
        
        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    END RESULT_SNAPPING
    --RESULT SNAPPING--

    --GET RANGE VALUE OR START RANGE THREAD--
    ROUTINE GET_RANGE
    BEGIN
        --GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)
        COMMAND_TYPE = 6
        REQUEST_SIZE = 2
        RESPONSE_SIZE = 4

        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
        READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)

        DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, RESPONSE_SIZE)
        DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
        
        SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)
    END GET_RANGE
    --GET RANGE VALUE--

    ROUTINE START_RANGE_THREAD
    VAR 
        STOP_SIGNAL : BOOLEAN
    BEGIN
        --GET REGISTER
        PARAMETERS_FIRST_REGISTER = GET_TPE_INT_PARAMETER(2)
        
        --GET STOP DO
        --STOP_SIGNAL = GET_TPE_INT_PARAMETER(3)
        
        REQUEST_SIZE = 2
        RESPONSE_SIZE = 4

        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)

        WHILE STOP_SIGNAL = OFF DO
            READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, comm_file)

            DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, RESPONSE_SIZE)
            DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
            
            SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)
        ENDWHILE
    END START_RANGE_THREAD
    --GET RANGE VALUE--


    --STOP RANGE THREAD--
    ROUTINE STOP_RANGE_THREAD
    BEGIN
        COMMAND_TYPE = 8
        REQUEST_SIZE = 2

        WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, comm_file)
    END STOP_RANGE_THREAD
    --STOP RANGE THREAD--

BEGIN
END RIF_RANGE_SEND_DATA