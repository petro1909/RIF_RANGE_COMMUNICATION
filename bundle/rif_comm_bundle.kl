PROGRAM RIF_COMM_BUNDLE
%STACKSIZE = 4000
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%ENVIRONMENT uif
%ENVIRONMENT sysdef
%ENVIRONMENT memo
%ENVIRONMENT kclop
%ENVIRONMENT bynam
%ENVIRONMENT fdev
%ENVIRONMENT flbt
%ENVIRONMENT regope
CONST 
    cc_home = 137
    cc_clear_win = 128
    
    RIF_RANGE = 25
    NORM_RIFTEK = 16384

    RIFTEK_DEFAULT_COMMAND = 128
VAR
    data_type   : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER

	INDEX : INTEGER
    comm_file : FILE

    ----INPUT PARAMETERS VARIABLES----
    COMMAND_TYPE : INTEGER
    
    PARAMETER_SIZE_IN_BYTES : INTEGER
    PARAMETER_FIRST_BYTE_CODE : INTEGER
    PARAMETER_VALUE : INTEGER
    PARAMETERS_FIRST_REGISTER : INTEGER
    ----INPUT PARAMETERS VARIABLES----
    
    
    ----QUERY VARIABLES----
    REQUEST_SIZE : INTEGER
    REQUEST_PARAMETER_ARR_TAKE_INDEX : INTEGER
    REQUEST_PARAMETER_ARR_TAKE_LENGTH : INTEGER
    REQUSET_PARAMETER_CODE_ARRAY : ARRAY[20] OF BYTE
    REQUSET_PARAMETER_VALUE_ARRAY : ARRAY[20] OF BYTE
    REQUEST_ARRAY : ARRAY[20] OF BYTE
    REQUEST_ARRAY_PUSH_INDEX : INTEGER
    
    RESPONSE_SIZE : INTEGER
    RESPONSE_ARRAY : ARRAY[20] OF BYTE 
    RESPONSE_PARAMETER_VALUE_ARRAY : ARRAY[20] OF BYTE
    RESPONSE_PARAMETER_ARR_PUSH_INDEX : INTEGER
    ----QUERY VARIABLES----

    --DEVICE INFO--
	DEVICE_TYPE : REAL
	PO_VERSION : REAL
    SERIAL_NUMBER : REAL
    BASE_DISTANCE : REAL
    RANGE : REAL
    --DEVICE INFO--
    
    DISTANCE : REAL

-----------------------
-----Custom errors-----
ROUTINE POSTERR(cause : STRING; STATUS : INTEGER)
BEGIN
IF(STATUS <> 0) THEN
    WRITE(STATUS)
    POST_ERR(STATUS, cause, 1, 1)
ENDIF
END POSTERR
ROUTINE POST_CUST_ERR(cause : STRING)
BEGIN
POST_ERR(0, cause, 0, 0)
END POST_CUST_ERR
-----Custom errors-----
-----------------------

----------------------------------------------
-----Read parameters with different types-----
-----INTEGER PARAMETERS-----
ROUTINE GET_TPE_INT_PARAMETER(number : INTEGER) : INTEGER
VAR
    data_type : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER
BEGIN
    GET_TPE_PRM(number, data_type, int_value, real_value, str_value, status)
    POSTERR('UNABLE TO READ PARAMETER', status)
    IF(data_type <> 1 ) THEN 
        POST_CUST_ERR('PARAMETER SHOULD BE INTEGER ') 
    ENDIF
    RETURN (int_value)
END GET_TPE_INT_PARAMETER
-----REAL PARAMETERS-----
ROUTINE GET_TPE_REAL_PARAMETER(number : INTEGER) : REAL
VAR
    data_type : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER
BEGIN
    GET_TPE_PRM(number, data_type, int_value, real_value, str_value, status)
    POSTERR('UNABLE TO READ PARAMETER', status)
    IF(data_type <> 2 ) THEN 
        POST_CUST_ERR('PARAMETER SHOULD BE INTEGER ') 
    ENDIF
    RETURN (real_value)
END GET_TPE_REAL_PARAMETER
-----STRING PARAMETERS-----
ROUTINE GET_TPE_STRING_PARAMETER(number : INTEGER) : STRING
VAR
    data_type : INTEGER
    int_value : INTEGER
    real_value : REAL
    str_value : STRING[20]
    status : INTEGER
BEGIN
    GET_TPE_PRM(number, data_type, int_value, real_value, str_value, status)
    POSTERR('UNABLE TO READ PARAMETER', status)
    IF(data_type <> 1 ) THEN 
        POST_CUST_ERR('PARAMETER SHOULD BE INTEGER ') 
    ENDIF
    RETURN (str_value)
END GET_TPE_STRING_PARAMETER
-----Read parameters with different types-----
----------------------------------------------



-------------------------------------------------------------------------------------------------------
------------------------------------PARAMETERS CONVERSION----------------------------------------------
--CONVERT DECIMAL PARAMETER CODE TO RIFTEK HEXADECIMAL BYTE ARRAY WITH LENGTH = param_size * 2
--1 BYTE PARAMETER --> PARAMETER CODE -- 5 -->  5 * 16 ^ 1 -->  [5, 0] --> [133, 128], 
--2 BYTE PARAMETER --> PARAMETER FIRST CODE -- 0A -->[0A, 0B] --> [10, 11] --> [138, 128, 139, 128]
ROUTINE CNV_DECIMAL_PARAM_TO_BYTE_ARRAY(param : INTEGER; param_size : INTEGER) : ARRAY OF BYTE
VAR 
    byte_parameter : ARRAY[20] OF BYTE
    comparation_value : REAL
    shift_value : REAL
    index : INTEGER
BEGIN
    comparation_value = 15
    shift_value = 1
    FOR INDEX = 1 TO param_size * 2 DO
        --------------------------------128---------------GET LOW TETRAD FROM PARAM BYTE-------------SHIFT RIGHT-
        byte_parameter[INDEX] = RIFTEK_DEFAULT_COMMAND + TRUNC((param AND TRUNC(comparation_value)) / shift_value)
        ------------------------------------------2 ^ 4-------
        comparation_value = comparation_value * EXP(4 * LN(2))
        -------------------------------2 ^ 4-------
        shift_value = shift_value * EXP(4 * LN(2))
    ENDFOR
    RETURN (byte_parameter)
END CNV_DECIMAL_PARAM_TO_BYTE_ARRAY

--CONVERT DECIMAL PARAMETER VALUE TO RIFTEK HEXADECIMAL BYTE ARRAY WITH LENGTH = param_size * 2
--1 BYTE PARAMETER --> PARAMETER VALUE -- 5 -->  5 * 16 ^ 1 -->  [5, 0] --> [133, 128], 
--2 BYTE PARAMETER --> PARAMETER VALUE -- 3200 --> 0000 1100 1000 0000 --> [12(0000 11000), 128(1000 0000)] --> [0, 12, 8, 0] --> [128, 140, 136, 128]
ROUTINE CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(param_code : INTEGER; param_size : INTEGER) : ARRAY OF BYTE
VAR 
    byte_parameter : ARRAY[20] OF BYTE
    comparation_value : REAL
    shift_value : REAL
    out_index : INTEGER
    in_index : INTEGER
BEGIN
    FOR out_index = 1 TO param_size * 2 DO
        comparation_value = 15
        shift_value = 1
        FOR in_index = 0 TO 1 DO
        -------------------------------------------------------128---------------GET LOW TETRAD FROM PARAM BYTE---------------SHIFT RIGHT-
            byte_parameter[out_index + in_index] = RIFTEK_DEFAULT_COMMAND + TRUNC((param_code AND TRUNC(comparation_value)) / shift_value)
            ------------------------------------------2 ^ 4------
            comparation_value = comparation_value * EXP(4 * LN(2))
            -------------------------------2 ^ 4------
            shift_value = shift_value * EXP(4 * LN(2))
        ENDFOR
        out_index = out_index + 1
        param_code = param_code + 1
    ENDFOR
    RETURN (byte_parameter)
END CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY

--CONVERT RIFTEK RESPONSE BYTE MESSAGE TO INTEGER PARAMETER
--[128, 140, 136, 128] --> [0, 12, 8, 0] --> [12(0000 11000), 128(1000 0000)] --> 3200
ROUTINE READ_PARAMETER_FROM_BYTE_ARRAY(response : ARRAY OF BYTE; start_byte_number : INTEGER; bytes_count : INTEGER) : INTEGER
VAR
    param_value : REAL
    multiplier : INTEGER
    power : INTEGER
    index : INTEGER
BEGIN
    param_value = 0
    multiplier = bytes_count * 2 - 1
    FOR INDEX = start_byte_number + bytes_count * 2 - 1 DOWNTO start_byte_number DO
        power = multiplier * 4
        ------------------------------------------------------------2 ^ power------
        param_value = param_value + ((response[index] AND 15) * EXP(power * LN(2)))
        multiplier = multiplier - 1
    ENDFOR
    RETURN (TRUNC(param_value))
END READ_PARAMETER_FROM_BYTE_ARRAY
------------------------------------PARAMETERS CONVERSION----------------------------------------------
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
------------------------------------------ARRAY ROUTINES-----------------------------------------------
--FILL ARRAY FROM START INDEX WITH DEFINED LENGTH WITH ZEROS 
ROUTINE CLEAR_ARR(arr : ARRAY OF BYTE; START_INDEX : INTEGER; LENGTH : INTEGER)
VAR 
	INDEX: INTEGER
BEGIN
 FOR index = START_INDEX TO START_INDEX + LENGTH - 1 DO
     arr[INDEX] = 0
 ENDFOR
END CLEAR_ARR
--FILL ARRAY FROM START INDEX TO END WITH ZEROS
ROUTINE CLEAR_ARR_TO_END(arr : ARRAY OF BYTE; START_INDEX : INTEGER)
VAR 
 index: INTEGER
BEGIN
 FOR index = START_INDEX TO ARRAY_LEN(arr)  DO
     arr[INDEX] = 0 
 ENDFOR
END CLEAR_ARR_TO_END
--INSERT ELEMENTS FROM SOURCE ARRAY FROM START INDEX WITH SPECIFIED LENGTH INTO DESTINATION ARRAY FROM START INDEX
ROUTINE PUSH_TO_ARRAY(dest_arr : ARRAY OF BYTE; dest_arr_insert_index : INTEGER; source_arr : ARRAY OF BYTE; source_arr_take_index : INTEGER; source_arr_take_length : INTEGER)
VAR
 index : INTEGER
 dest_index : INTEGER
BEGIN
    dest_index = dest_arr_insert_index
    FOR index = source_arr_take_index TO source_arr_take_index + source_arr_take_length - 1 DO
        dest_arr[dest_index] = source_arr[index]
        dest_index = dest_index + 1
    ENDFOR

END PUSH_TO_ARRAY
------------------------------------------ARRAY ROUTINES-----------------------------------------------
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
---------------------------------------FILE AND PORT MANIPULATION--------------------------------------
--SET ATTRIBUTE OF FILE AND PORT AND OPEN FILE
ROUTINE OPEN_FILE(comm_file : FILE)
BEGIN
    SET_FILE_ATR(comm_file, ATR_UF)
    SET_FILE_ATR(comm_file, ATR_IA)

    STATUS = SET_PORT_ATR(PORT_3, ATR_BAUD, BAUD_9600)
    POSTERR('Error setting ATR_BAUD!', STATUS)
    STATUS = SET_PORT_ATR(PORT_3, ATR_DBITS, DBITS_8)
    POSTERR('Error setting ATR_DBITS!', STATUS)
    STATUS = SET_PORT_ATR(PORT_3, ATR_PARITY, PARITY_EVEN)
    POSTERR('Error setting ATR_PARITY!', STATUS)
    STATUS = SET_PORT_ATR(PORT_3, ATR_READAHD, 1)
    POSTERR('Error setting ATR_READAHD!', STATUS)
    STATUS = SET_PORT_ATR(PORT_3, ATR_SBITS, SBITS_1)
    POSTERR('Error setting ATR_SBITS!', STATUS)


    CLR_IO_STAT(comm_file)
    STATUS = 0
  
    OPEN FILE comm_file('RW', 'P3:')
    STATUS = IO_STATUS(comm_file)
    WRITE('OPEN FILE STATUS  =  ',STATUS,CR)
END OPEN_FILE
--CLOSE FILE
ROUTINE CLOSE_FILE(comm_file : FILE)
BEGIN
    CLR_IO_STAT(comm_file) 
    STATUS = 0
    
    CLOSE FILE comm_file
    STATUS = IO_STATUS(comm_file)	
END CLOSE_FILE
---------------------------------------FILE AND PORT MANIPULATION--------------------------------------
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
---------------------------------------RIFTEK MESSAGES UTIL ROUTINES-----------------------------------
--WRITE COMMAND CODE AND NETWORK ADDRESS TO REQUEST ARRAY
ROUTINE WRITE_COMMAND_TO_REQUEST_ARRAY(arr : ARRAY OF BYTE; c_type : INTEGER)
BEGIN
    arr[1] = 1
    arr[2] = RIFTEK_DEFAULT_COMMAND + c_type
END WRITE_COMMAND_TO_REQUEST_ARRAY
--SEND REQUEST TO SPECIFIED PORT(FILE) WITH REQEST ARRAY DATA
ROUTINE SEND_REQUEST(req_bytes : ARRAY OF BYTE;  req_size : INTEGER; c_file : FILE)
VAR
    index : INTEGER
BEGIN
    FOR INDEX = 1 TO req_size DO
        --WRITE ('RQ ',req_bytes[INDEX]::1,CR)
        WRITE c_file(req_bytes[INDEX]::1)
    ENDFOR
    
    STATUS = IO_STATUS(comm_file) 
    WRITE('FILE STATUS  =  ',STATUS,CR)

END SEND_REQUEST
--READ RESPONCE FROM SPECIFIED PORT(FILE) AND WRITE RESPONSE DATA TO RESPONSE ARRRAY
ROUTINE READ_RESPONSE(res_bytes : ARRAY OF BYTE; res_size : INTEGER; c_file : FILE)
VAR
    IND : INTEGER
BEGIN
    FOR IND = 1 TO res_size DO
        READ c_file(res_bytes[IND]::1)
        WRITE('RS', res_bytes[IND]::1, CR)
    ENDFOR

    STATUS = IO_STATUS(comm_file) 
    WRITE('FILE STATUS  =  ', STATUS, CR)

END READ_RESPONSE
---------------------------------------RIFTEK MESSAGES UTIL ROUTINES-----------------------------------
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
-------------------------------------RIFTEK QUERY CODES ROUTINES---------------------------------------
----DEVICE IDENTIFICATION ROUTINE----
ROUTINE DEVICE_IDENTIFICATION(c_file : FILE; register : INTEGER)
BEGIN
    -- GET REGISTER
    PARAMETERS_FIRST_REGISTER = register
    
    COMMAND_TYPE = 1
    REQUEST_SIZE = 2
    RESPONSE_SIZE = 16
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
    FOR INDEX = 1 TO REQUEST_SIZE DO
        WRITE(REQUEST_ARRAY[INDEX],CR)
    ENDFOR
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
    READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)
    
    --DEVICE TYPE--
    DEVICE_TYPE =  READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, 1)
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DEVICE_TYPE, STATUS)
    
    --PO VERSION--
    PO_VERSION = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 3, 1)
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 1, PO_VERSION, STATUS)
    
    --SERIAL NUMBER--
    SERIAL_NUMBER = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 5, 2)
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 2, SERIAL_NUMBER, STATUS)
    
    --BASE DISTANCE--
    BASE_DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 9, 2)
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 3, BASE_DISTANCE, STATUS)
    
    --RANGE--
    RANGE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 13, 2)
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER + 4, RANGE, STATUS)
END DEVICE_IDENTIFICATION
----READ PARAMETER ROUTINE----
ROUTINE READ_PARAMETER_VALUE(c_file : FILE; size : INTEGER; code : INTEGER; register : INTEGER)
VAR
    IN_INDEX : INTEGER
BEGIN
    --READ PARAMETER SIZE (BYTES)
    PARAMETER_SIZE_IN_BYTES = size

    --READ PARAMETER FIRST BYTE CODE INT OR STRING
    PARAMETER_FIRST_BYTE_CODE = code
    
    --READ REGISTER
    PARAMETERS_FIRST_REGISTER = register

    COMMAND_TYPE = 2
    REQUEST_SIZE = 4
    RESPONSE_SIZE = 2

    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)

    REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)
    
    -- FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES * 4 DO
    --     WRITE(REQUSET_PARAMETER_CODE_ARRAY[INDEX], ' ')
    -- ENDFOR
    -- WRITE(CR)

    REQUEST_ARRAY_PUSH_INDEX = 3
    REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
    REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
    RESPONSE_PARAMETER_ARR_PUSH_INDEX = 1

    FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO
        PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)

        READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)
        
        PUSH_TO_ARRAY(RESPONSE_PARAMETER_VALUE_ARRAY, RESPONSE_PARAMETER_ARR_PUSH_INDEX, RESPONSE_ARRAY, 1, RESPONSE_SIZE)

        REQUEST_PARAMETER_ARR_TAKE_INDEX = REQUEST_PARAMETER_ARR_TAKE_INDEX + 2
        RESPONSE_PARAMETER_ARR_PUSH_INDEX = RESPONSE_PARAMETER_ARR_PUSH_INDEX + 2
    ENDFOR
    
    FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES * 2 DO
        WRITE(RESPONSE_PARAMETER_VALUE_ARRAY[INDEX], ' ')
    ENDFOR


    PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_PARAMETER_VALUE_ARRAY, 1, PARAMETER_SIZE_IN_BYTES)

    SET_INT_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
            
    CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
    CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
    CLEAR_ARR_TO_END(RESPONSE_ARRAY, 1)
    CLEAR_ARR_TO_END(RESPONSE_PARAMETER_VALUE_ARRAY, 1)
END READ_PARAMETER_VALUE
----WRITE PARAMETER ROUTINE----
ROUTINE WRITE_PARAMETER_VALUE(c_file : FILE; size : INTEGER; code : INTEGER; value : INTEGER)
VAR 
    IN_INDEX : INTEGER
BEGIN
    --READ PARAMETER SIZE (BYTES)
    PARAMETER_SIZE_IN_BYTES = size

    --READ PARAMETER FIRST BYTE CODE INT OR STRING
    PARAMETER_FIRST_BYTE_CODE = code

    --READ PARAMETER VALUE
    PARAMETER_VALUE = value
    COMMAND_TYPE = 3
    REQUEST_SIZE = 6
    
    --WRITE REQUEST CODE TO REQUEST ARRAY
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
    --WTITE PARAMETER CODE TO PARAMETER ARRAY
    REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, PARAMETER_SIZE_IN_BYTES)
    
    -- FOR IN_INDEX = 1 TO PARAMETER_SIZE_IN_BYTES * 2 DO
    --     WRITE(REQUSET_PARAMETER_CODE_ARRAY[IN_INDEX], ' ')
    -- ENDFOR
    -- WRITE(CR)

    --WTITE PARAMETER VALUE TO PARAMETER ARRAY
    REQUSET_PARAMETER_VALUE_ARRAY = CNV_DECIMAL_PARAM_TO_BYTE_ARRAY(PARAMETER_VALUE, PARAMETER_SIZE_IN_BYTES)
    
    -- FOR IN_INDEX = 1 TO PARAMETER_SIZE_IN_BYTES * 2 DO
    --     WRITE(REQUSET_PARAMETER_VALUE_ARRAY[IN_INDEX], ' ')
    -- ENDFOR
    -- WRITE(CR)
    
    REQUEST_ARRAY_PUSH_INDEX = 3
    REQUEST_PARAMETER_ARR_TAKE_INDEX = PARAMETER_SIZE_IN_BYTES * 2 - 1
    REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
    
    FOR INDEX = 1 TO PARAMETER_SIZE_IN_BYTES DO
        PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
        PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX + 2, REQUSET_PARAMETER_VALUE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
        FOR IN_INDEX = 1 TO REQUEST_SIZE DO
            WRITE(REQUEST_ARRAY[IN_INDEX], ' ')
        ENDFOR
        WRITE(CR)
        SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
        
        REQUEST_PARAMETER_ARR_TAKE_INDEX = REQUEST_PARAMETER_ARR_TAKE_INDEX - 2
    ENDFOR

    CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
    CLEAR_ARR_TO_END(REQUSET_PARAMETER_VALUE_ARRAY, 1)
    CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
END WRITE_PARAMETER_VALUE
----SAVE FLASH MEMORY----
ROUTINE SAVE_FLASH_MEMORY(c_file :FILE; register : INTEGER)
BEGIN
    PARAMETERS_FIRST_REGISTER = register
    PARAMETER_FIRST_BYTE_CODE = 170
    COMMAND_TYPE = 4
    REQUEST_SIZE = 4
    RESPONSE_SIZE = 2
    
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
    REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, 1)
    
    REQUEST_ARRAY_PUSH_INDEX = 3
    REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
    REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
    RESPONSE_PARAMETER_ARR_PUSH_INDEX = 1
    
    PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
    READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)
    
    PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, PARAMETER_SIZE_IN_BYTES)
    SET_INT_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
            
    CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
    CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
    CLEAR_ARR_TO_END(RESPONSE_ARRAY, 1)
END SAVE_FLASH_MEMORY
----LOAD DEFAULT PARAMETERS  IN FLASH MEMORY----
ROUTINE LOAD_DEFAULT_PARAMETERS(c_file :FILE; register : INTEGER)
BEGIN
    PARAMETERS_FIRST_REGISTER = register
    PARAMETER_FIRST_BYTE_CODE = 105
    COMMAND_TYPE = 4
    REQUEST_SIZE = 4
    RESPONSE_SIZE = 2
    
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
    REQUSET_PARAMETER_CODE_ARRAY = CNV_DECIMAL_PARAM_CODE_TO_BYTE_ARRAY(PARAMETER_FIRST_BYTE_CODE, 1)
    
    REQUEST_ARRAY_PUSH_INDEX = 3
    REQUEST_PARAMETER_ARR_TAKE_INDEX = 1
    REQUEST_PARAMETER_ARR_TAKE_LENGTH = 2
    RESPONSE_PARAMETER_ARR_PUSH_INDEX = 1
    
    PUSH_TO_ARRAY(REQUEST_ARRAY, REQUEST_ARRAY_PUSH_INDEX, REQUSET_PARAMETER_CODE_ARRAY, REQUEST_PARAMETER_ARR_TAKE_INDEX, REQUEST_PARAMETER_ARR_TAKE_LENGTH)
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
    READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)
    
    PARAMETER_VALUE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, PARAMETER_SIZE_IN_BYTES)
    SET_INT_REG(PARAMETERS_FIRST_REGISTER, PARAMETER_VALUE, STATUS)
            
    CLEAR_ARR_TO_END(REQUSET_PARAMETER_CODE_ARRAY, 1)
    CLEAR_ARR_TO_END(REQUEST_ARRAY, 1)
    CLEAR_ARR_TO_END(RESPONSE_ARRAY, 1)
END LOAD_DEFAULT_PARAMETERS
----RESULT SNAPPING----
ROUTINE RESULT_SNAPPING(c_file : FILE)
BEGIN
    COMMAND_TYPE = 5
    REQUEST_SIZE = 2
    
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
END RESULT_SNAPPING
----GET RANGE VALUE----
ROUTINE GET_RANGE(c_file : FILE; register : INTEGER)
BEGIN
    --GET REGISTER
    PARAMETERS_FIRST_REGISTER = register
    COMMAND_TYPE = 6
    REQUEST_SIZE = 2
    RESPONSE_SIZE = 4

    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
    READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)

    DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, TRUNC(RESPONSE_SIZE / 2))
    DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
    
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)
END GET_RANGE
----START RANGE THREAD----
ROUTINE START_RANGE_THREAD(c_file : FILE)
VAR 
    STOP_SIGNAL : BOOLEAN
BEGIN
    COMMAND_TYPE = 7
    REQUEST_SIZE = 2
    RESPONSE_SIZE = 4
    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)   
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
END START_RANGE_THREAD
----READ VALUE FROM RANGE THREAD----
ROUTINE READ_RANGE_THREAD(c_file : FILE; register : INTEGER) : REAL
BEGIN
    --GET REGISTER
    PARAMETERS_FIRST_REGISTER = register
    REQUEST_SIZE = 2
    RESPONSE_SIZE = 4
    READ_RESPONSE(RESPONSE_ARRAY, RESPONSE_SIZE, c_file)

    DISTANCE = READ_PARAMETER_FROM_BYTE_ARRAY(RESPONSE_ARRAY, 1, TRUNC(RESPONSE_SIZE / 2))
    DISTANCE = DISTANCE * RIF_RANGE / NORM_RIFTEK
    
    SET_REAL_REG(PARAMETERS_FIRST_REGISTER, DISTANCE, STATUS)
    RETURN (DISTANCE)
END READ_RANGE_THREAD
----STOP RANGE THREAD----
ROUTINE STOP_RANGE_THREAD(c_file : FILE)
BEGIN
    COMMAND_TYPE = 8
    REQUEST_SIZE = 2

    WRITE_COMMAND_TO_REQUEST_ARRAY(REQUEST_ARRAY, COMMAND_TYPE)
    SEND_REQUEST(REQUEST_ARRAY, REQUEST_SIZE, c_file)
END STOP_RANGE_THREAD
-------------------------------------RIFTEK QUERY CODES ROUTINES---------------------------------------
-------------------------------------------------------------------------------------------------------
BEGIN
END RIF_COMM_BUNDLE
ROUTINE RIG_F
BEGIN
END RIG_F