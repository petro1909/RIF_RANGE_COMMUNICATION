PROGRAM RIF_CALIB
%STACKSIZE = 4000
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%ENVIRONMENT uif
%ENVIRONMENT sysdef
%ENVIRONMENT memo
%ENVIRONMENT kclop
%ENVIRONMENT bynam
%ENVIRONMENT fdev
%ENVIRONMENT flbt
%ENVIRONMENT regope 
%INCLUDE klevccdf
%INCLUDE klevkeys
%INCLUDE klevkmsk
TYPE
    robot_rangefinder_point = STRUCTURE
        robot_position : XYZWPREXT
        rangefinder_point : REAL
        rotation_matrix : ARRAY[3,3] OF REAL
    ENDSTRUCTURE
CONST 
UTOOLVAR = '$MNUTOOL[1,'
VAR
comm_file : FILE
TEMP_POINT : robot_rangefinder_point
POS_REG_NUMBER : INTEGER
NUM_REG_NUMBER : INTEGER
TOOL_NUMBER : INTEGER
TOOL_NUMBER_STR : STRING[4]
INDEX : INTEGER
STATUS : INTEGER
ENTRY : INTEGER
real_flag : BOOLEAN
int_value : INTEGER
real_value : INTEGER

CALIB_POSITIONS : ARRAY[4] OF  robot_rangefinder_point
GAUSSIAN_MATRIX : ARRAY[3,4] OF REAL
RESULT_FRAME : ARRAY[4] OF REAL
RESULT_FRAME_POS : POSITION
CONF : CONFIG
--Round bound

ROUTINE GET_TPE_INT_PARAMETER(number : INTEGER) : INTEGER &
FROM RIF_COMM_BUNDLE
ROUTINE OPEN_FILE(comm_file : FILE) &
FROM RIF_COMM_BUNDLE
ROUTINE CLOSE_FILE(comm_file : FILE) &
FROM RIF_COMM_BUNDLE
ROUTINE GET_RANGE(c_file : FILE; register : INTEGER) : REAL &
FROM RIF_COMM_BUNDLE

ROUTINE FILL_ROTATION_MATRIX(point : robot_rangefinder_point)
VAR 
 m : ARRAY[3,3] OF REAL
 w : REAL
 p : REAL
 r : REAL
BEGIN
    w = point.robot_position.W
    p = point.robot_position.P
    r = point.robot_position.R
    
    m[1,1] = COS(p) * COS(r)
    m[1,2] = SIN(r) * COS(p)
    m[1,3] = -SIN(p)

    m[2,1] = SIN(w) * SIN(p) * COS(r) - COS(w) * SIN(r)
    m[2,2] = SIN(w) * SIN(p) * SIN(r) + COS(w) * COS(r)
    m[2,3] =  COS(p) * SIN(w)

    m[3,1] = COS(w) * SIN(p) * COS(r) + SIN(w) * SIN(r)
    m[3,2] = COS(w) * SIN(p) * SIN(r) - SIN(w) * COS(r)
    m[3,3] = COS(p) * COS(w)

    point.rotation_matrix = m
END FILL_ROTATION_MATRIX

ROUTINE FILL_GAUS_MATRIX(positions : ARRAY OF robot_rangefinder_point) : ARRAY[*,*] OF REAL
VAR
INDEX : INTEGER
gauss_matrix : ARRAY[3,4] OF REAL
BEGIN
    FOR INDEX = 1 TO 3 DO
        gauss_matrix[1, INDEX] = positions[1].rotation_matrix[INDEX, 3] - positions[2].rotation_matrix[INDEX, 3]
    ENDFOR
    gauss_matrix[1,4] = -(positions[1].robot_position.Z - positions[2].robot_position.Z)-- + (positions[1].rangefinder_point - positions[2].rangefinder_point)

    FOR INDEX = 1 TO 3 DO
        gauss_matrix[2, INDEX] = positions[1].rotation_matrix[INDEX, 3] - positions[3].rotation_matrix[INDEX, 3]
    ENDFOR
    gauss_matrix[2,4] = -(positions[1].robot_position.Z - positions[3].robot_position.Z)-- + (positions[1].rangefinder_point - positions[3].rangefinder_point)

    FOR INDEX = 1 TO 3 DO
        gauss_matrix[3, INDEX] = positions[2].rotation_matrix[INDEX, 2] - positions[3].rotation_matrix[INDEX, 2]
    ENDFOR
    gauss_matrix[3,4] = -(positions[2].robot_position.Y - positions[3].robot_position.Y)
    RETURN (gauss_matrix)
END FILL_GAUS_MATRIX

--Solving linear equations system by Gaussian elimination method--
ROUTINE GAUSS_METHOD(matrix : ARRAY[*,*] OF REAL) : ARRAY OF REAL
VAR 
gauss_matrix : ARRAY[3,4] OF REAL
zeroing_coefficient : REAL
index : INTEGER
result_matrix : ARRAY[4] OF REAL
BEGIN
    gauss_matrix = matrix
    zeroing_coefficient = -gauss_matrix[2, 1] / gauss_matrix[1, 1]
    FOR INDEX = 1 TO 4 DO
        gauss_matrix[2, INDEX] = gauss_matrix[2, INDEX] + (gauss_matrix[1, INDEX] * zeroing_coefficient)
    ENDFOR

    zeroing_coefficient = -gauss_matrix[3, 1] / gauss_matrix[1, 1]
    FOR INDEX = 1 TO 4 DO
        gauss_matrix[3, INDEX] = gauss_matrix[3, INDEX] + (gauss_matrix[1, INDEX] * zeroing_coefficient)
    ENDFOR

    zeroing_coefficient = -gauss_matrix[3, 2] / gauss_matrix[2, 2]
    FOR INDEX = 1 TO 4 DO
        gauss_matrix[3, INDEX] = gauss_matrix[3, INDEX] + (gauss_matrix[2, INDEX] * zeroing_coefficient)
    ENDFOR
    result_matrix[3] = gauss_matrix[3, 4] / gauss_matrix[3, 3]
    WRITE(result_matrix[3],CR)
    result_matrix[2] = (gauss_matrix[2, 4] - gauss_matrix[2, 3] * result_matrix[3]) / gauss_matrix[2, 2]
    WRITE(result_matrix[2],CR)
    result_matrix[1] = (gauss_matrix[1, 4] - (gauss_matrix[1, 2] * result_matrix[2]) - (gauss_matrix[1, 3] * result_matrix[3])) / gauss_matrix[1, 1]
    WRITE(result_matrix[1],CR)
RETURN (result_matrix)
END GAUSS_METHOD

BEGIN
    POS_REG_NUMBER = GET_TPE_INT_PARAMETER(1)
    NUM_REG_NUMBER = GET_TPE_INT_PARAMETER(2)
    TOOL_NUMBER = GET_TPE_INT_PARAMETER(3)
    WRITE(TOOL_NUMBER,CR)
    CNV_INT_STR(TOOL_NUMBER, 1, 10, TOOL_NUMBER_STR)
    WRITE('TOOL',TOOL_NUMBER_STR,CR)
    
    FOR INDEX = 1 TO 3 DO    
        TEMP_POINT.robot_position = GET_POS_REG(POS_REG_NUMBER, STATUS)
        FILL_ROTATION_MATRIX(TEMP_POINT)
        GET_REG(NUM_REG_NUMBER, real_flag, int_value, TEMP_POINT.rangefinder_point, STATUS)
        
        -- OPEN_FILE(comm_file)
        -- TEMP_POINT.rangefinder_point = GET_RANGE(comm_file, 200)
        -- CLOSE_FILE(comm_file)
        
        CALIB_POSITIONS[INDEX] = TEMP_POINT

        POS_REG_NUMBER = POS_REG_NUMBER + 1
        NUM_REG_NUMBER = NUM_REG_NUMBER + 1
    ENDFOR
    
    FOR INDEX = 1 TO 3 DO 
        WRITE(CALIB_POSITIONS[INDEX].robot_position)
    ENDFOR
    
    GAUSSIAN_MATRIX = FILL_GAUS_MATRIX(CALIB_POSITIONS)
    RESULT_FRAME = GAUSS_METHOD(GAUSSIAN_MATRIX)
    
    -- FOR INDEX = 1 TO 3 DO
    --     WRITE(RESULT_FRAME[INDEX], CR)
    -- ENDFOR
    
    RESULT_FRAME_POS = POS(RESULT_FRAME[1], RESULT_FRAME[2], RESULT_FRAME[3], 0, 0, 0, CALIB_POSITIONS[1].robot_position.CONFIG_DATA)
    --WRITE(RESULT_FRAME_POS,CR)
    SET_VAR(ENTRY, '*SYSTEM*', UTOOLVAR + TOOL_NUMBER_STR + ']', RESULT_FRAME_POS, status)
    WRITE(UTOOLVAR + TOOL_NUMBER_STR + ']',CR)
    WRITE(STATUS)

END RIF_CALIB